;;; Popups -- Summary:
;;; Commentary:
;; configuration of popups and management for Emacs
;;; generated by Zach Maas

;;; Code:

;; Shackle manages popups aggressively
;; This is the most important item here
(use-package shackle
	:ensure t
	:init
	(add-hook 'after-init-hook 'shackle-mode)
	(setq shackle-lighter "")
  (setq shackle-select-reused-windows nil) ; default nil
  (setq shackle-default-alignment 'below) ; default below
  (setq shackle-default-size 0.4) ; default 0.5
	(setq shackle-rules
				'(("*undo-tree*" :size 0.25 :align right)
					("*Help*" :select t :other t)
          ("*Completions*" :size 0.3 :align t)
					("*Messages*" :select nil :other t)
					("*compile pdf-tools*" :select nil :ignore t)
					("*eww*" :select t :popup t :align below)
					("*Flycheck errors*" :other t :popup t :select t)
					("*Synonyms List*" :other t :select t)
          ("*quickrun*" :size 0.5 :align right)
					("*compilation*" :select t)
					("*golint*" :select t)
					("\\`\\*e?shell" :regexp t :popup t)
					("\\`\\*e?shell" :regexp t :frame t)
					(neotree-mode :select t :other t :align left)
          (magit-status-mode :select t :inhibit-window-quit t :same t)
					(magit-log-mode :select t :inhibit-window-quit t)
					(magit-diff-mode :inhibit-window-quit t :align right)
					("\\`\\*output.*?\\*\\'" :regexp t :size 0.4)
          ("^\\*"  :regexp t :noselect t)
          ("^ \\*" :regexp t :noselect t)
					(shackle-default-rule '(:select t))))
	:config
	(add-hook 'after-init-hook 'shackle-mode))

;; Save window changes as we make them
(add-hook 'after-init-hook #'winner-mode)

;; Enable undo-tree mode globally
(use-package undo-tree
	:ensure	t
	:diminish undo-tree-mode
	:config
	(setq undo-tree-visualizer-timestamps t)
	(setq undo-tree-visualizer-diff t)
	(setq evil-want-fine-undo 'fine)
	(global-undo-tree-mode t))

;; Ranger is a vimish file-manager
(use-package ranger
	:ensure t
	:config
	(setq ranger-show-dotfiles t
				ranger-show-hidden t
				ranger-dont-show-binary t
				ranger-max-preview-size 10
				ranger-cleanup-on-disable t
				ranger-cleanup-eagerly t)
	(ranger-override-dired-mode t))

;; Better tree navigation of buffers
(use-package imenu-list
	:ensure t
	:config
	(setq imenu-auto-rescan t))

;; neotree - file tree like VIM's nerdtree
(use-package neotree
	:ensure t
	:defer t
	:commands neotree
	:init
	(use-package all-the-icons
		:ensure t
		;; Make sure to run all-the-icons-install-fonts
		)
	:config
	(add-hook 'neotree-mode-hook
						(lambda ()
							(define-key evil-normal-state-local-map (kbd "h") 'neotree-select-up-node)
							(define-key evil-normal-state-local-map (kbd "l") 'neotree-select-down-node)
							(define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
							(define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
							(define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)))
	(setq neo-smart-open t)
	(defun ono-neotree-hook (_unused)
		(nlinum-mode -1))
	(add-hook 'neo-after-create-hook 'ono-neotree-hook)
	(add-hook 'projectile-after-switch-project-hook 'neotree-projectile-action)
	(setq neo-vc-integration nil
				neo-autorefresh t)
	(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
	(global-set-key [f8] 'neotree-toggle))

;; popups.el ends here
