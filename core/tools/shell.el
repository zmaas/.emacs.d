;;; Shell-Tools -- Summary:
;;; Commentary:
;;; shell (mostly eshell) configuration for Emacs
;;; generated by Zach Maas

;;; Code:

;; with-editor for easier eshell work.
(use-package with-editor
	:ensure t
	:config
	(add-hook 'shell-mode-hook  'with-editor-export-editor)
	(add-hook 'term-exec-hook   'with-editor-export-editor)
	(add-hook 'eshell-mode-hook 'with-editor-export-editor))

;; Automatically import our ssh-keys and gpg keys
(use-package keychain-environment
  :ensure t
  :init
  (add-hook 'after-init-hook #'keychain-refresh-environment))

(use-package eshell
  :commands (eshell eshell-command)
  :bind ("C-c m" . eshell)
  :init
  (require 'em-smart)
  (setq eshell-glob-case-insensitive nil
        eshell-error-if-no-glob nil
				eshell-hist-ignoredups t
				eshell-destroy-buffer-when-process-dies t
        eshell-scroll-to-bottom-on-input nil
        eshell-where-to-jump 'begin
        eshell-review-quick-commands nil
        eshell-smart-space-goes-to-end t)
  ;; Initialize "smart" mode
  (add-hook 'eshell-mode-hook #'eshell-smart-initialize))

(use-package eshell-prompt-extras
	:ensure t
	:config
	(with-eval-after-load "esh-opt"
		(autoload 'epe-theme-lambda "eshell-prompt-extras")
		(setq eshell-highlight-prompt nil
					eshell-prompt-function 'epe-theme-lambda)))

;; Quick rebind for eshell...
(add-hook 'eshell-mode-hook
					(lambda () 
						(escape>define-key eshell-mode-map (kbd "<tab>")
															 (lambda () (interactive) (pcomplete-std-complete)))))

;; Make ansi-term work with our powerline config
(defadvice ansi-term (after advise-ansi-term-coding-system)
	(set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix))
(ad-activate 'ansi-term)
(add-hook
 'term-mode-hook
 (lambda () (setq show-trailing-whitespace nil)))
