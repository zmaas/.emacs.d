;;; Lisp-Tools -- Summary:
;;; Commentary:
;; configuration of Lisp editing packages for Emacs
;;; generated by Zach Maas

;;; Code:

;; Common Lisp Configuration

;; Require common lisp
(use-package cl
	:ensure t)

;; Uses SLIME configured for sbcl
(use-package sly
	:ensure t
	:init
	(use-package sly-company
		:ensure t)
	(use-package sly-macrostep
		:ensure t)
	(use-package sly-quicklisp
		:ensure t)
	(use-package sly-repl-ansi-color
		:ensure t)
	:config
	(add-to-list 'auto-mode-alist '("\\.lisp\\'" . lisp-mode))
	(add-to-list 'auto-mode-alist '("\\.lsp\\'" . lisp-mode))
	(setq inferior-lisp-program "ros run")
	(add-hook 'sly-mode-hook 'sly-company-mode)
	(add-to-list 'company-backends 'sly-company)
	(setq sly-contribs '(sly-fancy sly-tramp sly-quicklisp sly-repl-ansi-color))
  (sly-setup '(sly-fancy sly-repl-ansi-color sly-tramp sly-quicklisp)))

;; Racket Configuration

;; Setup for racket
(use-package geiser
	:ensure t
	:init
	;; (use-package quack
	;; 	:ensure t)
	:config
	(add-hook 'scheme-mode-hook #'geiser-mode))

;; special per-mode keybindings for racket Editing
(general-define-key
 :states '(normal visual insert emacs)
 :keymaps 'geiser-mode-map
 :prefix "SPC"
 :non-normal-prefix "M-SPC"
 "l" '(:ignore t :which-key "layer")
 "lr" '(run-racket :which-key "racket repl")
 "ll" '(geiser-eval-definition :which-key "eval def")
 "le" '(geiser-eval-buffer :which-key "eval buffer")
 "lj" '(geiser-insert-lambda :which-key "lambda"))

;; Emacs Lisp	Configuration
(use-package ielm)

(use-package eldoc
	:diminish	""
	:config
	(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
	(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
	(add-hook 'ielm-mode-hook 'turn-on-eldoc-mode))

(use-package srefactor
	:ensure t
	:init
	(use-package srefactor-lisp))

(use-package elisp-slime-nav
	:ensure t
	:diminish	""
	:config
	(dolist (hook '(emacs-lisp-mode-hook ielm-mode-hook))
		(add-hook hook 'elisp-slime-nav-mode)))

;; special per-mode keybindings for	slime
(general-define-key
 :states '(normal visual insert emacs)
 :keymaps '(sly-mode-map sly-mrepl-mode-map)
 :prefix "SPC"
 :non-normal-prefix "M-SPC"
 "l" '(:ignore t :which-key "layer")
 "lR" '(sly :which-key "start sly")
 "la" '(sly-apropos-all :which-key "apropos")
 "lr" '(sly-mrepl :which-key "mrepl")
 "ln" '(sly-mrepl-new :which-key "new mrepl")
 "ls" '(sly-list-connections :which-key "connections")
 "lc" '(sly-mrepl-clear-repl :which-key "clear mrepl")
 "lq" '(sly-quit-lisp :which-key "quit mrepl")
 "ll" '(sly-eval-defun :which-key "eval def")
 "le" '(sly-eval-buffer :which-key "eval buffer"))

;;; zm-lisp-tools.el ends here
