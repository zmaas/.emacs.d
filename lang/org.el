;;; org.el --- Org-mode utilities
;;
;; Filename: org.el
;; Description: Org-Mode Configuration
;; Author: Zach Maas <zach.maas@gmail.com>
;; Maintainer: Zachary Maas
;; Created: Mon Dec 31 22:43:11 2018 (-0700)
;; Version:
;; URL:
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;; Org-mode configuration for Emacs
;; generated by Zach Maas, 2019
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(use-package org
	:straight t ;org-plus-contrib
	:config
	(setq org-directory "~/Dropbox/Org/")
	(use-package org-contacts
		:ensure nil
		:after org
		:config
		(setq org-contacts-files '("~/Dropbox/Org/contacts.org"))))

;; Orgmode comments
(use-package poporg
	:straight t)

;; ASCII Bullets
(use-package org-superstar
	:straight t
	:config
	(add-hook 'org-mode-hook 'org-superstar-mode)
	(org-superstar-configure-like-org-bullets))

(defun ono-org-mode-header-hook ()
  "Stop the org-level headers from increasing in height relative to the other text."
  (dolist (face '(org-level-1
                  org-level-2
                  org-level-3
                  org-level-4
                  org-level-5))
    (set-face-attribute face nil :weight 'semi-bold :height 1.0)))

(add-hook 'org-mode-hook 'ono-org-mode-header-hook)
(add-hook 'org-mode-hook 'auto-revert-mode)

;; Efficient searching
(use-package org-ql
	:straight t
	:config)

;; Essential org-mode setup
(setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
        (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))

(setq org-tag-alist (quote (("@errand" . ?e)
                            ("@office" . ?o)
                            ("@home" . ?h)
                            ("@school" . ?s)
                            (:newline)
                            ("@taatjes" . ?t)
                            ("@dowell" . ?d)
                            ("@collab" . ?c))))

(setq org-fast-tag-selection-single-key nil)

(setq org-completion-use-ido t)
(setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
(setq bookmark-save-flag t)
(setq org-refile-allow-creating-parent-nodes 'confirm)
(setq org-src-fontify-natively t)

;; Basic Agenda Configuration
(setq org-agenda-files '("~/Dropbox/Org/"))
;; (setq org-agenda-files '("~/Dropbox/Org/"
;; 												 "~/dowell_lab/org/"))
(setq org-clock-idle-time 15)
(setq org-default-notes-file "~/Dropbox/Org/organizer.org")
(defun org-agenda-process-inbox-item ()
  "Process a single item in the org-agenda."
	(interactive "")
  (org-with-wide-buffer
   (org-agenda-set-tags)
	 (org-agenda-todo)
   (org-agenda-refile nil nil t)))

;; Better Agenda
(use-package org-super-agenda
	:straight t
	:config
  (org-super-agenda-mode t))

(setq org-agenda-span 'day
			org-agenda-skip-scheduled-if-done t
			org-agenda-skip-deadline-if-done t
			org-agenda-include-deadlines t)

;; FIXME This binding won't work.
(general-define-key
 :states '(normal visual emacs)
 :keymaps	'org-agenda-mode
 "p" '(org-agenda-process-inbox-item :which-key "process"))

(setq org-agenda-custom-commands
      '(("z" "Super Zach View"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today"
                                :time-grid t
                                :date today
                                :scheduled today
																:deadline today
                                :order 1)))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Refile"
																 :and (:scheduled past :todo "TODO")
																 :and (:deadline past :todo "TODO")
																 :and (:file-path "mobile_capture.org" :todo "TODO")
																 :order 0)
													(:name "Next"
																 :todo "NEXT"
																 :order 1)
													(:name "Future"
																 :scheduled future
																 :deadline future
																 :order 2)
													))))))))

;; Custom Capture Templates
(setq org-capture-templates
			'(("t" "Todo" entry (file+headline "~/Dropbox/Org/organizer.org" "Inbox")
				 "* TODO  %?\n  %i\n  %a")
				("w" "Work Log" entry (file+olp+datetree "~/Dropbox/phd/org/phd_log.org")
				 "* %T %^{Note Topic}\n - %? %i" :tree-type week)
				("d" "Did" entry (file "~/Dropbox/Org/did.org")
				 "* %T\n - %? %i")
				("e" "Email" entry (file+headline "~/Dropbox/Org/organizer.org" "Inbox")
				 "* TODO Email: %a" :immediate-finish t)))

;; Setup `org-babel' for emacs-lisp, gnuplot, latex and shell-script.
(org-babel-do-load-languages
 'org-babel-load-languages
 '((calc . t)
   (ditaa . t)
   (emacs-lisp . t)
   (gnuplot . t)
   (latex . t)
   (octave .t)
   (C . t)
   (python . t)
   (R . t)
   (ruby . t)
	 (shell . t)))
(setq org-src-fontify-natively t)
(setq org-latex-listings 'minted)
(add-to-list 'org-latex-packages-alist '("" "minted"))
(setq org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

;; Better bindings for org-mode through evil.
(use-package evil-org
	:straight t
	:init
	(use-package evil-org-agenda
		:config
		(evil-org-agenda-set-keys))
	:config
	(evil-org-set-key-theme '(navigation insert textobjects additional calendar))
	(add-hook 'org-mode-hook #'evil-org-mode))

;; Calendar settings
(use-package calfw
	:straight t
	:init
	;; Still setting up
	(use-package calfw-org
		:straight t)
	(use-package calfw-gcal
		:straight t)
	(use-package org-gcal
		:straight t
		:config
		(setq org-gcal-auto-archive t
					org-gcal-down-days 60
					org-gcal-up-days 60))
	(load-file "~/.emacs.d/lang/org-private.el")
	(setq cfw:fchar-junction ?╋
				cfw:fchar-vertical-line ?┃
				cfw:fchar-horizontal-line ?━
				cfw:fchar-left-junction ?┣
				cfw:fchar-right-junction ?┫
				cfw:fchar-top-junction ?┯
				cfw:fchar-top-left-corner ?┏
				cfw:fchar-top-right-corner ?┓))

;; TODO	Consider other PDF viewer
(use-package org-ref
	:straight t
	:config
	(setq reftex-default-bibliography '("~/Dropbox/Org/bibliography/references.bib"))
	(setq org-ref-bibliography-notes "~/Dropbox/Org/bibliography/notes.org"
				org-ref-default-bibliography '("~/Dropbox/Org/bibliography/references.bib")
				org-ref-pdf-directory "~/Dropbox/Org/bibliography/bibtex-pdfs/")
	(setq bibtex-completion-pdf-field "File"))

(use-package org-noter
	:straight t
	:config)

(use-package deft
	:straight t
	:config
	(use-package zetteldeft
		:straight t
		:after deft)
	(setq deft-extensions '("org" "md" "txt")
				deft-directory "~/Dropbox/Org/notes"
				deft-default-extension "org"
				deft-text-mode 'org-mode
				deft-recursive t
				deft-use-filename-as-title nil
				deft-use-filter-string-for-filename t
				deft-auto-save-interval 0))

(use-package org-roam
	:straight t
	:disabled t
	:config
	(setq org-roam-directory "~/Dropbox/Org/notes/"))

(use-package org-pomodoro
  :straight t
  :commands (org-pomodoro)
  :config
	(setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))))

(defun +org-init-custom-fontification ()
	"Correct (and improve) org-mode's font-lock keywords.
	1. Re-set `org-todo' & `org-headline-done' faces, to make them respect
		 underlying faces.
	2. Fontify item bullets
	3. Fontify item checkboxes (and when they're marked done)
	4. Fontify dividers/separators (5+ dashes)
	5. Fontify #hashtags and @at-tags, for personal convenience"
	(let ((org-todo (format org-heading-keyword-regexp-format
													org-todo-regexp))
				(org-done (format org-heading-keyword-regexp-format
													(concat "\\(?:" (mapconcat #'regexp-quote org-done-keywords "\\|") "\\)"))))
		(setq
		 org-font-lock-extra-keywords
		 (append (org-delete-all
							`(("\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
								 (0 (org-get-checkbox-statistics-face) t))
								(,org-todo (2 (org-get-todo-face 2) t))
								(,org-done (2 'org-headline-done t)))
							org-font-lock-extra-keywords)
						 `((,org-todo (2 (org-get-todo-face 2) prepend))
							 (,org-done (2 'org-headline-done prepend))
							 ;; Make checkbox statistic cookies respect underlying faces
							 ("\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
								(0 (org-get-checkbox-statistics-face) prepend))
							 ;; I like how org-mode fontifies checked TODOs and want this to extend to
							 ;; checked checkbox items:
							 ("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)"
								1 'org-headline-done prepend)
							 ;; make plain list bullets stand out
							 ("^ *\\([-+]\\|[0-9]+[).]\\) " 1 'org-list-dt append)
							 ;; and separators/dividers
							 ("^ *\\(-----+\\)$" 1 'org-meta-line)
							 ;; custom #hashtags & @at-tags for another level of organization
							 ("\\s-\\(\\([#@]\\)[^ \n.,]+\\)" 1 (+org--tag-face 2)))))))

(defun +org-init-ui ()
	;;"Configures default UI settings for orgmode"
	(setq-default
	 org-adapt-indentation nil
	 org-agenda-dim-blocked-tasks nil
	 org-agenda-inhibit-startup t
	 org-agenda-skip-unavailable-files nil
	 org-cycle-include-plain-lists t
	 org-cycle-separator-lines 1
	 org-fontify-done-headline t
	 org-fontify-quote-and-verse-blocks t
	 org-fontify-whole-heading-line t
	 org-footnote-auto-label 'plain
	 org-hidden-keywords nil
	 org-hide-emphasis-markers nil
	 org-hide-leading-stars t
	 org-hide-leading-stars-before-indent-mode t
	 org-image-actual-width nil
	 org-indent-indentation-per-level 2
	 org-indent-mode-turns-on-hiding-stars t
	 org-pretty-entities nil
	 org-pretty-entities-include-sub-superscripts t
	 org-startup-folded t
	 org-startup-indented t
	 org-startup-with-inline-images nil
	 org-tags-column 0
	 org-use-sub-superscripts '{}
	 outline-blank-line t
	 ;; Properly scale LaTeX previews
	 org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
	(defsubst +org--tag-face (n)
		(let ((kwd (match-string n)))
			(or (and (equal kwd "#") 'org-tag)
					(and (equal kwd "@") 'org-special-keyword))))

	(add-hook 'org-font-lock-set-keywords-hook #'+org-init-custom-fontification))

(defun +org-init-olivetti ()
	"Initialize olivetti mode with proper width for orgmode buffers."
	(olivetti-set-width 100)
	(olivetti-mode))

;; Call our UI function
(add-hook 'org-load-hook #'+org-init-ui)
(add-hook 'org-load-hook #'+org-init-olivetti)

(general-define-key
 :states '(normal visual emacs)
 :keymaps	'deft-mode-map
 "q" '(quit-window :which-key "quit")
 "n" '(zetteldeft-new-file :which-key "new")
 "s" '(zetteldeft-new-file-and-link :which-key "new-name")
 "a" '(deft-archive-file :which-key "archive")
 "r" '(zetteldeft-file-rename :which-key "rename")
 "f" '(deft-filter :which-key "filter")
 "c" '(deft-filter-clear :which-key "clear filter")
 "d" '(deft-delete-file :which-key "delete"))

(general-define-key
 :states '(normal visual insert emacs)
 :prefix "SPC"
 :non-normal-prefix "M-SPC"
 "o" '(:ignore t :which-key "org")
 "oS" '(counsel-org-agenda-headlines :which-key "rifle")
 "oa" '(org-agenda :which-key "agenda")
 "oc" '(org-capture :which-key "capture")
 "oC" '(cfw:open-org-calendar :which-key "calendar")
 "oo" '(ono-open-organizer-file :which-key "organizer")
 "on" '(ono-org/gtd-nav/body :which-key "gtd")
 "op" '(org-pomodoro :which-key "pomodoro")
 "oi" '(org-clock-in :which-key "clock in")
 "ow" '(org-insert-structure-template :which-key "template")
 "oO" '(org-clock-out :which-key "clock out")
 "ot" '(org-todo :which-key "todo")
 "of" '(helm-org-rifle :which-key "find")
 "oq" '(helm-org-ql :which-key "query")
 "om" '(org-mu4e-store-and-capture :which-key "capture message")
 "oT" '(org-set-tags-command :which-key "tag")
 "os" '(org-schedule :which-key "schedule")
 "od" '(org-deadline :which-key "deadline")
 "oe" '(org-export-dispatch :which-key "export")
 "ol" '(org-toggle-latex-fragment :which-key "latex")
 "oL" '(org-todo-list :which-key "deadline")
 "og" '(counsel-org-goto-all :which-key "goto")
 "or" '(org-refile :which-key "refile"))

;;; zm-org-tools.el ends here

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; org.el ends here
