;;; Python-Tools -- Summary:
;;; Commentary:
;;; configuration of python editing packages for Emacs
;;; generated by Zach Maas

;;; Code:

;; Python Development Setup
;; IN PROGRESS - anaconda is good so far, some lag that needs to be figured out
(use-package anaconda-mode
	:straight t
	:disabled t
	:diminish	anaconda-mode
	:init
	:config
	(add-hook 'python-mode-hook #'anaconda-mode))

(setq python-shell-interpreter "python3"
			python-shell-interpreter-args "")

(use-package pyvenv
	:straight t
	:disabled t
	:config
	(setq pyvenv-workon "emacs")
	(pyvenv-tracking-mode 1))

(use-package pyenv-mode
	:straight t
	:init
	(add-to-list 'exec-path "~/.pyenv/shims")
	(setenv "WORKON_HOME" "~/.pyenv/versions/")
	:config
	(pyenv-mode))

(when (executable-find "ipython")
	(setq python-shell-interpreter "ipython"
				python-shell-completion-native nil
				python-shell-interpreter-args "-i --simple-prompt --no-color-info"
				python-shell-prompt-regexp "In \\[[0-9]+\\]: "
				python-shell-prompt-block-regexp "\\.\\.\\.\\.: "
				python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
				python-shell-completion-setup-code
				"from IPython.core.completerlib import module_completion"
				python-shell-completion-string-code
				"';'.join(get_ipython().Completer.all_completions('''%s'''))\n"))

;; (use-package company-anaconda
;; 	:straight t
;; 	:config
;; 	(add-hook 'python-mode-hook 'anaconda-mode)
;; 	(add-hook 'python-mode-hook #'(lambda ()
;; 																	(add-to-list 'company-backends 'company-anaconda)))
;; 	(add-hook 'anaconda-mode-hook #'anaconda-eldoc-mode))

;; Sphinx-doc -- Automagically add docstrings to python	functions
(use-package sphinx-doc
	:straight t
	:diminish	""
	:config
	(add-hook 'python-mode-hook (lambda  () (sphinx-doc-mode t))))

;; Yapfify -- Better formatter
;; (use-package yapfify
;; 	:straight t
;; 	:config
;; 	(add-hook 'python-mode-hook #'yapf-mode))

(use-package blacken
	:straight t
	:config
	(setq blacken-line-length 80
				blacken-allow-py36 nil)
	(add-hook 'python-mode-hook #'blacken-mode))

;; EIN - Emacs Ipython Notebooks
(use-package ein
	:straight t)

;; Mode	keybinds
(general-define-key
 :states '(normal visual insert emacs)
 :keymaps '(python-mode-map inferior-python-mode-map)
 :prefix "SPC"
 :non-normal-prefix "M-SPC"
 "l" '(:ignore t :which-key "layer")
 "lr" '(run-python :which-key "python repl")
 "lf" '(yapfify-buffer :which-key "autoformat")
 "ll" '(python-shell-send-statement :which-key "eval region")
 "lc" '(comint-clear-buffer :which-key "clear repl")
 "le" '(python-shell-send-buffer :which-key "eval buffer")
 "lE" '(python-shell-send-defun :which-key "eval defun")
 "ld" '(anaconda-mode-find-definitions :which-key "def")
 "lD" '(sphinx-doc :which-key "add docs")
 "l?" '(anaconda-mode-show-doc :which-key "docs?")
 "lv" '(pyenv-mode-set :which-key "venv-on")
 "lV" '(pyenv-mode-unset :which-key "venv-off"))

;;; zm-python-tools.el ends here
